<?xml version="1.0"?>
<ruleset name="Common code sniffer ruleset based on PSR-12">
    <config name="installed_paths" value="../../slevomat/coding-standard" />

    <exclude-pattern>./vendor/*</exclude-pattern>

    <!-- Do not allow variable assignment in conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator" />
    <!-- Check new lines around multi-line conditions, whiles, etc... -->
    <rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
        <properties>
            <property name="controlStructures" type="array">
                <element value="if" />
                <element value="do" />
                <element value="while" />
                <element value="for" />
                <element value="foreach" />
                <element value="switch" />
                <element value="try" />
            </property>
        </properties>
    </rule>

    <!-- Check new lines around return, continue, etc... statements -->
    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing">
        <properties>
            <property name="linesCountBetweenMembers" value="1" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.ConstantSpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1" />
            <property name="maxLinesCountBeforeWithComment" value="1" />
            <property name="minLinesCountBeforeWithoutComment" value="0" />
            <property name="maxLinesCountBeforeWithoutComment" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1" />
            <property name="maxLinesCountBeforeWithComment" value="1" />
            <property name="minLinesCountBeforeWithoutComment" value="0" />
            <property name="maxLinesCountBeforeWithoutComment" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.ParentCallSpacing" />
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing" />
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="linesCountAfterWhenLastInCaseOrDefault" value="1" />
            <property name="linesCountAfterWhenLastInLastCaseOrDefault" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Attributes.AttributeAndTargetSpacing">
        <properties>
            <property name="linesCount" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Attributes.RequireAttributeAfterDocComment" />

    <!-- Check for useless conditions (eg: if ($var == true) return true;) -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn" />
    <!-- Check for useless ternary operator (eg: $var === true ? true : false;) -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator" />
    <!-- No Yoda shell pass! -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison" />

    <!-- Check for useless duplicated variable assignment -->
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable" />

    <!-- Check for constants without declared visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility" />
    <!-- Forbidden using of traits separated by comma -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration" />

    <!-- Check for missing trailing comma in arrays -->
    <rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement" />
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace">
        <properties>
            <property name="spacesAroundBrackets" value="0" />
        </properties>
    </rule>

    <!-- Check for missing trailing comma in functions calls and declarations -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall" />
    <!-- # Available since v7.2 <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInClosureUse" /> -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration" />

    <!-- Declare closure static if it doesn't $this -->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure" />

    <!-- ##### EXCEPTIONS ##### -->
    <!-- Check for unreachable catch statements and unused cached exceptions -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch" />
    <rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch" />
    <!-- Catch \Throwable instead of \Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />

    <!-- Namespaces must be sorted alphabetically -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
        <properties>
            <property name="caseSensitive" value="true" />
        </properties>
    </rule>
    <!-- Lines around namespace declaration -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing" />
    <!-- Lines around use declaration -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing" />
    <!-- Use from same namespace is forbidden -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
    <!-- Multiple uses per line are forbidden -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine" />
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />

    <!-- Type hints should be used wherever it makes sense -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Doctrine\Common\Collections\Collection" />
                <element value="\Doctrine\Common\Collections\ArrayCollection" />
            </property>
        </properties>
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification" />
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Doctrine\Common\Collections\Collection" />
                <element value="\Doctrine\Common\Collections\ArrayCollection" />
            </property>
        </properties>
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification" />
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Doctrine\Common\Collections\Collection" />
                <element value="\Doctrine\Common\Collections\ArrayCollection" />
            </property>
        </properties>
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification" />
    </rule>

    <!-- Disallow useless @var annotation for constants -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint" />
    <!-- Enforces using shorthand scalar type hint variants in annotations -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints" />
    <!-- NULL should be on the last position in annotation type hint -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition" />
    <!-- Arguments with NULL default must be nullable -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
    <!-- Enforce space after colon in return type hint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing" />
    <!-- Enforce space after type hint in parameters and properties -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />
    <rule ref="SlevomatCodingStandard.Classes.PropertyDeclaration" />
    <!-- Check for missing strict types declaration -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="spacesCountAroundEqualsSign" value="0" />
        </properties>
    </rule>

    <!-- Enforces using shorthand cast operators -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast" />
    <!-- Check for useless semicolons -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />

    <!-- Checks for useless doc comments -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Doctrine\Common\Collections\Collection" />
            </property>
        </properties>
    </rule>
    <!-- Check for empty comments and annotations -->
    <rule ref="SlevomatCodingStandard.Commenting.DeprecatedAnnotationDeclaration" />
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment" />
    <!-- Requires comments with single-line content to be written as one-liners. -->
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment" />
    <!-- The {@inheritDoc} is forbidden -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment" />
    <!-- Another forbidden useless annotations -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@author" />
                <element value="@created" />
                <element value="@version" />
                <element value="@package" />
                <element value="@copyright" />
                <element value="@license" />
            </property>
        </properties>
    </rule>
    <!-- Forbid useless comments generated by PHPStorm -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="/^Class \S+\.*$/i" />
                <element value="/^Interface \S+\.*$/i" />
                <element value="/^Trait \S+\.*$/i" />
                <element value="/^\S+ constructor\.*$/i" />
                <element value="/^Created by \S+\.*$/i" />
                <element value="/^User: \S+$/i" />
                <element value="/^Date: \S+$/i" />
                <element value="/^Time: \S+$/i" />
                <element value="/^\S+ [gs]etter\.*$/i" />
            </property>
        </properties>
    </rule>
    <!-- Enforce spacing in annotations -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="annotationsGroups" type="array">
                <element value="
                    @template,
                    @extends,
                    @implements,
                    @template-extends,
                    @template-implements,
                "/>
                <element value="
                    @dataProvider,
                "/>
                <element value="
                    @deprecated,
                    @obsolete,
                "/>
                <element value="
                    @todo,
                    @see,
                    @link,
                "/>
                <element value="
                    @throws,
                    @var,
                    @param,
                    @return,
                "/>
            </property>
        </properties>
    </rule>

    <!-- Apply all rules from PSR-12 except space indention -->
    <rule ref="PSR12">
        <exclude name="PSR12.ControlStructures.ControlStructureSpacing" />
        <exclude name="PSR2.Classes.ClassDeclaration.CloseBraceAfterBody" />
    </rule>

    <!-- Class and Interface names should be unique in a project. They should never be duplicated. -->
    <rule ref="Generic.Classes.DuplicateClassName" />

    <!-- Incrementer in nested loops should use different variable names. -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />
    <!-- Control Structures must have at least one statement inside of the body. -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement" />
    <!-- For loops that have only a second expression (the condition) should be converted to while loops. -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
    <!-- If statements that are always evaluated should not be used. -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
    <!-- Methods should not be declared final inside of classes that are declared final. -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
    <!-- Methods should not be defined that only call the parent method. -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />
    <!-- There should only be one class defined in a file. -->
    <rule ref="Generic.Files.OneClassPerFile" />
    <!-- There should only be one interface defined in a file. -->
    <rule ref="Generic.Files.OneInterfacePerFile" />
    <!-- There should only be one trait defined in a file. -->
    <rule ref="Generic.Files.OneTraitPerFile" />
    <!-- Multiple statements are not allowed on a single line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements" />
    <!-- Exactly one space is allowed after a cast. -->
    <rule ref="Generic.Formatting.SpaceAfterCast" />

    <!-- Some functions should not appear in the code -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array"
                value="var_dump=>null,dump=>null,dd=>null,echo=>null,require=>null,require_once=>null,include=>null,include_once=>null,phpinfo=>null,eval=>null,sizeof=>count,printf=>null,strval=>null,intval=>null,boolval=>null,floatval=>null,doubleval=>null" />
        </properties>
    </rule>

    <!-- Bans the use of the PHP long array syntax. -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax" />

    <!-- When referencing arrays you should not put whitespace around the opening bracket or before the closing bracket. -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />

    <!-- The self keyword should be used instead of the current class name -->
    <rule ref="Squiz.Classes.SelfMemberReference" />
    <!-- The asterisks in a doc comment should align. -->
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar" />
    </rule>

    <!-- Doc comment formatting (but use only some of the rules) -->
    <rule ref="Generic.Commenting.DocComment" />
    <rule ref="Generic.Commenting.DocComment.ContentAfterOpen">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.DocComment.ContentBeforeClose">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.DocComment.MissingShort">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.DocComment.TagValueIndent">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.DocComment.NonParamGroup">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.DocComment.ParamGroup">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.DocComment.ParamNotFirst">
        <severity>0</severity>
    </rule>

    <!-- We allow empty catch statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"> <!-- compatibility with pre-3.2.3 versions -->
        <severity>0</severity>
    </rule>
    <!-- But the empty catch statements must have comment explaining why the exception is not handled -->
    <rule ref="Squiz.Commenting.EmptyCatchComment" />
    <!-- Tests that the ++ operators are used when possible and not used when it makes the code confusing. -->
    <rule ref="Squiz.Operators.IncrementDecrementUsage" />
    <!-- Verifies that class members have scope modifiers. -->
    <rule ref="Squiz.Scope.MemberVarScope" />
    <!-- Casts should not have whitespace inside the parentheses. -->
    <rule ref="Squiz.WhiteSpace.CastSpacing" />
    <!-- The PHP constructs like echo, return, include, etc. should have one space after them. -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />
    <!-- The PHP keywords static, public, private, and protected should have one space after them. -->
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing" />
    <!-- Proper operator spacing -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
            <property name="ignoreSpacingBeforeAssignments" value="false" />
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />

    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <!-- Lines length -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120" />
            <property name="absoluteLineLimit" value="0" />
            <property name="ignoreComments" value="true" />
        </properties>
    </rule>

    <!-- Strict code -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation" />

    <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="groups" type="array">
                <element value="uses" />
                <element value="enum cases" />
                <element value="public constants" />
                <element value="protected constants" />
                <element value="private constants" />
                <element value="public properties" />
                <element value="public static properties" />
                <element value="protected properties" />
                <element value="protected static properties" />
                <element value="private properties" />
                <element value="private static properties" />
                <element value="constructor" />
                <element value="destructor" />
                <element value="methods" />
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiConstantDefinition" />
    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiPropertyDefinition" />
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0" />
            <property name="linesCountBeforeClosingBrace" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference" />
    <rule ref="SlevomatCodingStandard.Classes.RequireConstructorPropertyPromotion" />

    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEmpty" />
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses" />
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator" />

    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace" />
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction" />
    <rule ref="SlevomatCodingStandard.Functions.RequireArrowFunction" />
    <rule ref="SlevomatCodingStandard.Functions.StrictCall" />

    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />
    <rule ref="SlevomatCodingStandard.Numbers.RequireNumericLiteralSeparator">
        <properties>
            <property name="minDigitsBeforeDecimalPoint" value="6" />
            <property name="minDigitsAfterDecimalPoint" value="6" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators" />
    <rule ref="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators">
        <exclude name="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators.DisallowedPreDecrementOperator" />
        <exclude name="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators.DisallowedPreIncrementOperator" />
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
    <rule ref="SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable" />

    <rule ref="SlevomatCodingStandard.PHP.DisallowDirectMagicInvokeCall" />
    <rule ref="SlevomatCodingStandard.PHP.ShortList" />

    <!-- Too many spaces aren't good -->
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces" />
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>10</severity>
    </rule>

    <!-- Fully qualified names -->
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions" />
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants" />
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFullyQualifiedExceptions" value="true" />
            <property name="allowFullyQualifiedGlobalClasses" value="true" />
            <property name="allowFullyQualifiedGlobalFunctions" value="true" />
            <property name="allowFullyQualifiedGlobalConstants" value="true" />
        </properties>
    </rule>

    <!-- Remove dead code -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable" />
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable" />
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable" />
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias" />

    <!-- Nicer code -->
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment" />

    <!-- Force single quote for plain string -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired" />

    <arg value="p" />
    <arg name="encoding" value="utf-8" />
</ruleset>
